stickout=55;
arm=6;one=10;
onemore=10;
onesapart=33;
two=stickout-one;
twoandhalf=onesapart/2;
three=onesapart/2;
heatbreakangle=-2;

$fn=24;

//fanpart();

holderpart();


module holderpart(){
difference(){
    union(){
translate([onesapart/2,0,1])minkowski(){sphere(1.5); cylinder(5,2,3,center=true,$fn=6);}
translate([-onesapart/2,0,1])minkowski(){sphere(1.5); cylinder(5,2,3,center=true,$fn=6);}

translate([onesapart/2,0,0])cylinder(one,arm,arm,center=false);
translate([-onesapart/2,0,0])cylinder(onemore,arm,arm,center=false);

translate([onesapart/2,0,one])sphere(arm);
translate([-onesapart/2,0,onemore])sphere(arm);

color("yellow")translate([0,0,one])rotate([0,90,0])cylinder(onesapart,arm,arm,center=true);

translate([-onesapart/2,0,one])rotate([0,0,0])cylinder(two,arm,arm,center=false);
translate([-onesapart/2,0,one])rotate([0,0,0])translate([0,0,two])sphere(arm);

translate([-onesapart/2,0,one])rotate([0,0,0])translate([0,0,two])rotate([0,90,0])cylinder(twoandhalf,arm,arm,center=false);
translate([-onesapart/2,0,one])rotate([0,0,0])translate([0,0,two])rotate([0,90,0])translate([0,0,twoandhalf])sphere(arm);

translate([0,0,60])minkowski(){sphere(1.5); cylinder(5,3,2,center=true,$fn=6);}
translate([-onesapart/2,0,60])minkowski(){sphere(1.5); cylinder(5,3,2,center=true,$fn=6);}
}

color("red"){

    translate([onesapart/2,0,0])cylinder(28,2,2,center=true,$fn=6);
    translate([-onesapart/2,0,0])cylinder(28,2,2,center=true,$fn=6);
    
    translate([-onesapart/2,0,60])cylinder(20,1.3,1.3,center=true,$fn=6);
    translate([0,0,60])cylinder(20,1.3,1.3,center=true,$fn=6);

translate([-onesapart/4+3,1.5,4.5])rotate([0,-55,0])cylinder(22,2.5,2.5,center=true,$fn=22);
translate([-onesapart/2+2.5,1.5,stickout/2+6+23])rotate([60,0,12])sphere(2.2,$fn=22);  
  translate([-onesapart/2+2.5,1.5,stickout/2+6-23])rotate([60,0,12])sphere(2.5,$fn=22);   
translate([-onesapart/2+2.5,1.5,stickout/2+6])rotate([0,0,0])cylinder(46.0,2.5,2.5,center=true,$fn=22);
    
translate([-onesapart/4-2,-2.5,stickout+6.5])
    rotate([0,40,-40])cylinder(15,2,2,center=true,$fn=22);

}
}
}
use <fan_holder_v2.scad>
use <shapes.scad>
use <ruler.scad>
pi = 3.1415926535897932384626433832795;

module fanpart(){
 difference(){
    translate([-onesapart/4,-9,63])minkowski(){
    cube([25-2,26-2,8-2],center=true);
    sphere(1);
    }
    translate([-onesapart/4,-11+3,67])rotate([-90,0,0])sphere(5);    
    translate([-onesapart/4,-8.7+3,67])rotate([-90,0,0])cylinder(6,4.45,0,center=false);
    
    translate([-onesapart/2-2,-18,65])linear_extrude(3)text("RepRap",4);

translate([0,0,60])minkowski(){sphere(1.8); cylinder(5,3,2,center=true,$fn=6);}
translate([-onesapart/2,0,60])minkowski(){sphere(1.8); cylinder(5,3,2,center=true,$fn=6);}
translate([-onesapart/2,0,60])cylinder(20,1.3,1.3,center=true,$fn=5);
    translate([0,0,60])cylinder(20,1.3,1.3,center=true,$fn=5);
 translate([-12,0-22,60])cylinder(20,1.6,1.6,center=true,$fn=5);
translate([-10,0-22,60])rotate([0,0,180])cylinder(20,1.6,1.6,center=true,$fn=5);
}  
difference(){
translate([0,-60,59])rotate([180,0,90])fanduct();
translate([-12,0-22,60])cylinder(20,1.6,1.6,center=true,$fn=5);
translate([-10,0-22,60])rotate([0,0,180])cylinder(20,1.6,1.6,center=true,$fn=5);
}
}

module belg(){
    intersection(){
    difference(){
translate([8,0,8])
rotate([0,heatbreakangle,0])cylinder(14, 11,3.5,center=true,$fn=5);
    translate([8,0,7])
rotate([0,heatbreakangle,0])cylinder(16, 10,2.5,center=true,$fn=5);
}
translate([0,0,14])rotate([0,90,0])cylinder(100,15,15,center=true,$fn=5);
}
}
module fanduct (){
    
    
  


difference(){
    kostebinderiet();
    translate([8,0,8])
rotate([0,heatbreakangle,0])cylinder(16, 10,3,center=true,$fn=5); 
}
    belg();
}
layerHeight = 0.25;    //Layer height used for printing - Cura OK with this.
//layerHeight = 1; 

outerRadius = 1.6;     //outer corner radius
wall        = 1.5;    	 //wall thickness
m3_diameter = 3.5;
kFanSize    = 40;

/////Settings for E3D V5 hotend and extruder from http://www.thingiverse.com/thing:119616 
heaterBlockW                = 11; 
nozzleOffsetFromBlockCenter = -2; //+ve if towards mount 
heaterBlockGap              = 13; //Horizontal gap between vented tube and heated block - 7 ended up being 6 mm
mountToFilamentHoriz        = 01.25; 
fanAngleFromVert            = 11;
mountToHotEndBottomZ        = 64; //vertical distance from center of mounting hinge to tip of nozzl

//For E3D v6

bedClearanceGap = 11;   //Bottom of each vented duct is this far above the tip of the nozzle.
					   
//The vented duct reduces in area by changing from oval to round
ventedDuctMaxHeight   = 20; // 22
ventedDuctWidth       = 8; 
endCapDia             = 9;
slotAngleFromVertical = 60;
slotWidthDegrees      = 50;


slotMaxWidthFrac = 0.2;

camberAngle = -20;         //Oval part of vented duct is rotated from vertical by this amount (i.e. bottoms inwards).
toeInAngle = -7;          //Increase this to compensate for the air tending to blow forwards more than backwards. 

//Mounting parameters
mountingHingeDia = 8;  
hingeInsideWidth = 7.2;  // width of the hinge block on the extruder from http://www.thingiverse.com/thing:119616
hingeOuterWidth  = 6;	   // Thickness of each hinge strut on the fan duct
hingeLen         = 6.2;  // Distance out to the center of the hole


rulery = 2;//kFanSize/2;//-21;

hingePos = [kFanSize+hingeLen-m3_diameter/2,rulery,-mountingHingeDia/2];
module kostebinderiet(){
FanSplitter(mountToHotEndBottomZ,kFanSize,heaterBlockW,ventedDuctMaxHeight,ventedDuctWidth /*,mountToHeatBlockHorizontal*/);
mirror([0,1,0])
	FanSplitter(mountToHotEndBottomZ,kFanSize,heaterBlockW,ventedDuctMaxHeight,ventedDuctWidth/*,mountToHeatBlockHorizontal*/);

translate([-outerRadius,-kFanSize/2,-mountingHingeDia])
	{
	_fan_mount(
			fan_size = kFanSize,
			fan_mounting_pitch = 32,
			fan_m_hole_dia = 2.5, //For self-tapping M3 screws
			holder_thickness = mountingHingeDia
		 );

//Airflow splitter
	translate([0,(kFanSize-wall)/2,0])
		{
//Shear the rectangle to get half the splitter
		multmatrix(m = [ [1, 0, 0, 0],
                 		  [0, 1, wall/(2*mountingHingeDia), 0],
                        [0, 0, 1, 0],
                        [0, 0, 0,  1]
                        ])
			cube([kFanSize,wall/3,mountingHingeDia]);
//Shear the other half the other way
		multmatrix(m = [ [1, 0, 0, 0],
                 		  [0, 1, -wall/(2*mountingHingeDia), 0],
                        [0, 0, 1, 0],
                        [0, 0, 0,  1]
                        ])
			cube([kFanSize,wall/3,mountingHingeDia]);
		}

//Mounting hinge
	
      
        
        //translate([kFanSize,kFanSize/2+hingeInsideWidth/2,0])
	//	MountingHinge(mountingHingeDia,hingeLen,hingeOuterWidth);
	//translate([kFanSize,kFanSize/2-hingeInsideWidth/2-hingeOuterWidth,0])
	//	MountingHinge(mountingHingeDia,hingeLen,hingeOuterWidth);
	}	

}


module MountingHinge(dia = 8, lenIn = 12,thickness = 4)
{
len = lenIn;//-dia/2;
difference()
	{
	union()
		{
		translate([len,thickness,dia/2])
		rotate([90,0,0])
			cylinder(h = thickness,r = dia/2);
		cube([len,thickness,dia]);
		}
	translate([len,thickness,dia/2])
	rotate([90,0,0])
		cylinder(h = thickness,r = m3_diameter/2,$fn=9);				
	}
}


module FanSplitter(mountToHotEndBottomZ, fanSizeIn = 30, heaterBlockW = 20, smallDuctH = 20, smallDuctW = 12 /*,mountToHeatBlockHorizontal,*/)
{
//Two mirrored versions of this attach to the fan mount and duct the air to the level of the heated block of the hotend.
fanSize = fanSizeIn-2*outerRadius;
minAngle = 80;
ventedDuctsSeparation = heaterBlockW + 2*heaterBlockGap;
ventedDuctsSeparationMax = ventedDuctsSeparation + sin(toeInAngle)*ventedDuctsSeparation;

xTrans = cos(fanAngleFromVert)*(mountToHotEndBottomZ-bedClearanceGap)+
	sin(fanAngleFromVert)*mountingHingeDia/2-
	hingeLen-fanSizeIn-max(cos(camberAngle)*smallDuctH/2, smallDuctW/2);
zTrans = tan(minAngle)*xTrans+fanSize/2+smallDuctH/2; //keep the steepest angle >= minAngle deg from x y plane.
yTrans = ventedDuctsSeparationMax/2 + max(smallDuctW/2, sin(camberAngle)*smallDuctH/2);
width = fanSize/2;
nzSteps = zTrans/layerHeight; 
di = 1/nzSteps;
stepZ = zTrans*di;
union()
{
for(i=[0:di:1])
	{
	assign(width = fanSize/2*(1-i)+i*smallDuctW, height = fanSize*(1-i)+i*smallDuctH )
		{
	
		translate([-xTrans*pow(i,2/*5*/),yTrans*((1-i)*pow(i,1.05)+i*pow(i,0.5)),zTrans*i])
		difference()
			{
			minkowski()
				{
				cube([(1-i)*height,(1-i)*width,stepZ]);
				rotate([0,0,camberAngle])
					oval(((1-i)*outerRadius+i*height/2),((1-i)*outerRadius+i*width/2),stepZ);
				}
			translate([(1-i)*wall,(1-i)*wall,0])
			scale([(height-2*wall)/height, (width-2*wall)/width,1])
				minkowski()
					{
					cube([(1-i)*height,(1-i)*width,stepZ]);
					rotate([0,0,camberAngle])
						oval(((1-i)*outerRadius+i*height/2),((1-i)*outerRadius+i*width/2),stepZ);
					}
			}
		}
	}  
  
translate([-xTrans,yTrans,zTrans])
	mirror([0,1,0])
		ventedTube(smallDuctH,smallDuctW,0.8*(ventedDuctsSeparation),fanAngleFromVert);
}
//#cylinder_ep(hingePos,[-(xTrans+smallDuctH/2),rulery,zTrans]);

}

module ventedTube(height, width, slotLen, fanAngleFromVert)
{
  len = mountToFilamentHoriz+slotLen/2;  //horizontal center of slot should be at nozzle
  xTrans = len*sin(fanAngleFromVert)
	         -cos(camberAngle)*(height-width)/2; //Compensate for blend from oval to circular below, so as to keep bottom to tube horizontal

  yTrans = sin(camberAngle)*(height-width)/2+sin(toeInAngle)*len;

  //slotAngle = fanAngleFromVert-atan(0.5*(height-width)/len);

  zTrans  = len*cos(fanAngleFromVert);
  nzSteps = zTrans/layerHeight; 
  di      = 1/nzSteps;
  stepZ   = zTrans*di;
  r1      = height/2;
  r2      = width/2;

  //slotWidth = r2*3.1459*45/180; //Corresponds to 45 degrees
  slotWidth = r2*3.1459*slotWidthDegrees/180; //Corresponds to 45 degrees

  difference() //Comment this line to see the slot airflow direction
  { 
	union()
		{
		for(i = [0:di:1])
			{//Blend from oval to circular to reduce volume in a linear fashion
			assign(r1 = (height/2)*(1-i)+i*endCapDia/2,r2 = (width/2)*(1-i)+i*endCapDia/2)
				{
				//translate([xTrans*i,yTrans*(1-cos(i*90)),zTrans*i])
				translate([xTrans*i,yTrans*pow(i,2),zTrans*i])
					rotate([0,0,-camberAngle])
						ovalTube(stepZ,r1,r2,wall);
				}
			}
		//End cap
		translate([xTrans,yTrans,zTrans])
			endCap(endCapDia/2,wall,fanAngleFromVert/2);
		}
		//rotate([0,slotAngle,0]) //Second, rotate the slot to be parallel to the ventedTube
		multmatrix(m = [ [1, 0, xTrans/len, 0],
                 		  [0, 1, (yTrans)/len, 0],
                        [0, 0, 1, 0],
                        [0, 0, 0,  1]
                        ])

			rotate([0,0,90-slotAngleFromVertical])  //First, rotate the slot to point down at an angle of 90 from horizontal
				translate([-slotWidth/2,0,mountToFilamentHoriz-slotLen/2-nozzleOffsetFromBlockCenter])  //horizontal center of slot should be at nozzle])
					{
					hull()
						{
						
#translate([0,0,1.3*slotMaxWidthFrac*slotLen])	cube([slotWidth,2*r2,(1-slotMaxWidthFrac)*slotLen-slotWidth]);

						//Add prism at top to avoid need for support
                   #translate([slotWidth/2,0,slotLen-slotWidth/2])	cube([0.5,2*r2,0.5*slotWidth]);

						//Add prism at bottom for symmetry
						#translate([slotWidth/2,0,-slotWidth/2])
							cube([0.5,2*r2,0.5*slotWidth]);
						}
					}
                    
	}
}

//End cap for the vented ducts
module endCap(r,wall,fanAngleFromVert)
{
len = .5*r; // 1.4
xTrans = len*sin(fanAngleFromVert);
zTrans = len*cos(fanAngleFromVert);
nzSteps = zTrans/layerHeight; 
di = 1/nzSteps;
stepZ = zTrans*di;
r1 = r-wall;
for(i = [0:di:1])
	{
	assign(r1 = (r-wall)*(1-i)+wall)
		{
		translate([xTrans*i,0,zTrans*i])
			ovalTube(stepZ,r1,r1,wall);
		}
	}
}

module coneTube(h, r1, r2, wall, center = false)
{
difference()
	{
	cylinder(h, r1, r2, center);
	cylinder(h, r1-wall, r2-wall, center);
	}
}
